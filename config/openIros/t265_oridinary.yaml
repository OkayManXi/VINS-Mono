%YAML:1.0

#common parameters
imu_topic: "/camera/imu"
image_topic: "/camera/fisheye1/image_raw"
output_path: "/home/zty/myGit/VINS-Mono/src/VINS-Mono/results/"

#camera calibration
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 848
image_height: 800
projection_parameters:
   k2: -0.00465915
   k3: 0.0351829
   k4: -0.0314684
   k5: 0.00401986
   mu: 285.574399102829
   mv: 285.1946693432151
   u0: 419.4920589491109
   v0: 395.84800952387

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.99998069,  -0.00400108,  0.00475481,
           0.00400253,  -0.99999195, 0.00029394,
           0.0047536,  0.00031296,   0.99998865]
#   data: [ 0.99992917, 0.00878151,  0.00803387,
# 	  -0.00870674,  0.9999189,  -0.0092943,
#	  -0.00811483, 0.00922369,  0.99992453]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0000162, 0.00003775, 0.00008139]

#feature traker paprameters
max_cnt: 150          # max feature number in feature tracking
min_dist: 30            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
pyr_levels: 3
patch_size: 21
max_iteration: 30
track_precision: 0.01
show_feature_track: 1
dataset_name: "caffe1-ordinary"

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0122177031079  #0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.00253443077875 #0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 4.611407846673096e-04  #0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 5.424323329419951e-06  #2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805    # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 0             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/zty/myGit/VINS-Mono/src/VINS-Mono/results/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
